{"version":3,"file":"460.js","mappings":"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","sources":["webpack://sleact-ts-front/./layouts/Workspace/style.tsx","webpack://sleact-ts-front/./components/Menu/style.tsx","webpack://sleact-ts-front/./components/Menu/index.tsx","webpack://sleact-ts-front/./components/Modal/style.tsx","webpack://sleact-ts-front/./components/Modal/index.tsx","webpack://sleact-ts-front/./components/CreateChannelModal/index.tsx","webpack://sleact-ts-front/./pages/DirectMessage/style.tsx","webpack://sleact-ts-front/./components/ChatBox/style.tsx","webpack://sleact-ts-front/./components/ChatBox/index.tsx","webpack://sleact-ts-front/./components/ChatList/style.tsx","webpack://sleact-ts-front/./components/Chat/style.tsx","webpack://sleact-ts-front/./components/Chat/index.tsx","webpack://sleact-ts-front/./components/ChatList/index.tsx","webpack://sleact-ts-front/./utils/makeSection.ts","webpack://sleact-ts-front/./hooks/useSocket.ts","webpack://sleact-ts-front/./utils/combineOldNewChats.ts","webpack://sleact-ts-front/./pages/Channel/style.tsx","webpack://sleact-ts-front/./pages/DirectMessage/index.tsx","webpack://sleact-ts-front/./components/InviteChannelModal/index.tsx","webpack://sleact-ts-front/./pages/Channel/index.tsx","webpack://sleact-ts-front/./components/InviteWorkspaceModal/index.tsx","webpack://sleact-ts-front/./components/DMList/style.tsx","webpack://sleact-ts-front/./components/EachDM/index.tsx","webpack://sleact-ts-front/./components/DMList/index.tsx","webpack://sleact-ts-front/./components/EachChannel/index.tsx","webpack://sleact-ts-front/./components/ChannelList/index.tsx","webpack://sleact-ts-front/./layouts/Workspace/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const RightMenu = styled.div`\n  // 요소를 좌우 방향으로 부유(floating)시키는 데 사용, 주변 요소는 요소의 오른쪽을 피해서 배치\n  // { none, left, right }\n  // cf> 부유된 요소의 부모 요소가 부유된 요소를 감싸지 않는 경우, 부모 요소는 부유된 요소를 인식하지 못하고 무시할 수 있음에 주의\n  // 일반적으로 레이아웃에 float 속성을 사용하는 것보다 다른 방식을 선호하는 경향이 있음\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px; // 고정\n  background: #350d36;\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n\n  & img {\n    display: flex;\n  }\n\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  // flex-direction : row가 default => row 방향\n  display: flex;\n  // 하나의 flex 아이템이 자신의 컨테이너가 차지하는 공간에 맞추기 위해 크기를 키우거나 줄이는 방법을 설정하는 속성\n  // flex-grow, flex-shrink, flex-basis의 단축 속성\n  // flex-grow : 요소가 자신이 속한 플렉스 컨테이너 내에서의 비율. 다른 flex-grow 값이 설정된 형제 요소들과 비율에 따라 크기가 조절\n  // flex-shrink : 요소가 자신의 컨텐츠가 플렉스 컨테이너 내에서 가용 공간을 초과할 경우, 자동으로 축소되도록 허용. 값이 커질수록 축소 비율이 커짐\n  // flex-basis : 요소가 플렉스 컨테이너 내에서 가용한 공간을 모두 차지할 수 있도록 함\n  flex: 1;\n`;\n\n// display: flex\n// - 플렉스 컨테이너는 블록 레벨 요소로 취급\n// - 기본적으로 가로 방향으로 최대 너비를 차지\n// - 컨테이너의 너비를 초과하는 플렉스 아이템이 있을 경우, 줄 바꿈이 발생하지 않고 컨테이너 내에서 너비를 분배\n\n// display: inline-flex\n// - 플렉스 컨테이너는 인라인 레벨 요소로 취급\n// - 컨텐츠의 너비에 맞게 축소. 즉, 컨테이너의 크기는 내부 요소에 따라 동적으로 결정\n// - 플렉스 컨테이너는 줄 바꿈이 가능하며, 컨테이너의 너비를 초과하는 플렉스 아이템은 다음 줄로 이동\n\n// vertical-align : trp\n// - https://developer.mozilla.org/ko/docs/Web/CSS/vertical-align\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: #3f0e40;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-right: 1px solid rgb(82, 38, 83);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\n// nav 태그\n// 문서의 부분 중 현재 페이지 내, 또는 다른 페이지로의 링크를 보여주는 구획을 나타냄\n// 자주 쓰이는 예제는 메뉴, 목차, 색인\nexport const Channels = styled.nav`\n  width: 260px;\n  display: inline-flex;\n  flex-direction: column;\n  background: #3f0e40;\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n\n    &.selected {\n      color: white;\n    }\n  }\n\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    // 요소 내의 텍스트가 요소의 너비를 초과하는 경우, 초과된 텍스트를 생략 부호(...)로 표시하는 기능을 제공\n    // 조건\n    // 1. 요소는 일련의 텍스트를 포함하는 블록 레벨 요소여야 합니다. (예: <div>, <p>, <span> 등)\n    // 2. 요소는 고정된 너비를 가져야 합니다. (예: width 속성으로 너비를 설정)\n    // 3. 요소에 overflow: hidden; 속성을 함께 설정하여 초과된 텍스트를 감출 수 있도록 해야 합니다.\n    text-overflow: ellipsis;\n    // 초과된 텍스트 감추기\n    overflow: hidden;\n    // 텍스트를 한 줄로 유지\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: transparent;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll = styled.div`\n  // 요소의 높이를 뷰포트의 100%에서 102픽셀을 뺀 값으로 설정하는 것을 의미\n  // 요소의 높이가 뷰포트의 높이에 반응하면서 상단 또는 하단에 고정된 102픽셀의 여백을 가짐\n  // 즉, 동적으로 값을 계산하면 뷰포트 크기에 따라 요소의 높이를 조정할 수 있음\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n\n  & h2 {\n    padding-left: 20px;\n  }\n\n  // 부모 요소의 직접적인 자식으로 있는 <button> 요소를 선택하는 선택자\n  // > 기호는 자식 선택자를 나타내며, 부모 요소의 직계 자식 요소만 선택\n  // 아무 기호가 없는 경우 부모 요소 내에서 모든 <button> 요소를 선택하는 선택자\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: transparent;\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n\n    // :last-of-type 선택자는 해당 유형의 요소 중에서 가장 마지막으로 나타나는 요소를 선택하는 데 사용\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const Chats = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\n// display: inline-block\n// - 인라인과 블록의 중간 형태로 요소를 조정할 수 있어 다양한 레이아웃 상황에서 유연하게 사용될 수 있음\n// - 요소를 인라인 박스(inline box)처럼 취급하면서도 블록 박스(block box)처럼 동작하도록 설정\n// - 1. 인라인 요소처럼 줄 바꿈 없이 나란히 배치되지만, 동시에 블록 요소처럼 너비와 높이, 여백 등을 설정할 수 있음\n// - 2. 인라인 요소인 <span>과 같은 요소에도 너비와 높이를 설정할 수 있게 해주어 레이아웃을 유연하게 조정할 수 있음\n// - 3. margin, padding 등 박스 모델 속성을 적용할 수 있음\n// https://developer.mozilla.org/ko/docs/Web/CSS/display\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 1000;\n\n  & > div {\n    position: absolute;\n    display: inline-block;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    min-width: 360px;\n    z-index: 512;\n    max-height: calc(100vh - 20px);\n    color: rgb(29, 28, 29);\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import React, { CSSProperties, FC, useCallback } from 'react';\nimport { CloseModalButton, CreateMenu } from '@components/Menu/style';\n\n// props type\n// - typescript에서 props를 사용하게 되면, props에 대한 type을 지정해주어야 함!\n// - javascipt에서 Menu.propTypes = {} 했던 것과 동일한 개념\n\n// 2. type interface를 작성\ninterface Props {\n  show: boolean;\n  onCloseModal: (e: any) => void; // 어쩔 수 없이 any 사용? ts 컴파일러의 추천\n  style: CSSProperties;\n  closeButton?: boolean; // ?\n}\n\n// 1. props 자리에 props 작성\n// 3. generic을 이용하여 FC<Props>로 컴포넌트와 props를 연결 => Props.show 이렇게 사용하지 않는 방법!\nconst Menu: FC<Props> = ({ children, style, show, onCloseModal, closeButton }) => {\n  // 부모 컴포넌트를 누르면, 모달이 닫혀야 함 => <CreateMenu onClick={onCloseModal}>\n  // 자신의 컴포넌트를 누르면, 닫히지 않고 로직이 실행되어야 함 => <div onClick={stopPropagation} style={style}>\n  // - 이벤트 버블링 : div(자식)를 클릭하면 CreateMenu(부모)까지 클릭 이벤트가 전달됨\n  // - <div>를 클릭했는데도 <CreateMenu>의 onCloseModal 함수가 실행되는 문제가 발생\n  // - why? 자식 영역이 부모 영역의 일부이기 때문?\n  // - e.stopPropagation()을 이용 : 부모 컴포넌트로 이벤트가 전달되지 않음\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  // &times;\n  // HTML 엔티티 : HTML에서 특정 캐릭터들이 예약되어있기 때문에 표기의 혼란을 막기 위해서 사용\n  // &nbsp;( ), &times;(x), &lt;(<) 등...\n  // https://blog.outsider.ne.kr/380\n\n  // Menu 컴포넌트 밖에서 { show ? <Menu /> : null } 와 같은 효과\n  if (!show) return null;\n\n  return (\n    // <div onClick={stopPropagation}>\n    <CreateMenu onClick={onCloseModal}>\n      <div onClick={stopPropagation} style={style}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateMenu>\n    // </div>\n  );\n};\n\n// defaultProps Object\n// - **컴포넌트에 props를 넣어주지 않아도, 기본적으로 props를 넣어 줌**\nMenu.defaultProps = {\n  closeButton: true,\n};\n\nexport default Menu;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import React, { FC, useCallback } from 'react';\nimport { CloseModalButton, CreateModal } from '@components/Modal/style';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  closeButton?: boolean; // ?\n}\n\n// Menu 컴포넌트와 거의 비슷 => stopPropagation(), show, onCloseModal props\n// 차이점 => 보이는 위치가 다름\nconst Modal: FC<Props> = ({ show, children, onCloseModal, closeButton }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  // modal이 처음에는 보이지 않는 이유\n  if (!show) return null;\n\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nModal.defaultProps = {\n  closeButton: true,\n};\n\nexport default Modal;\n","import React, { VFC, useCallback } from 'react';\nimport Modal from '@components/Modal';\nimport { Label, Input, Button } from '@pages/SignUp/style';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\nimport { IUser, IChannel } from '@typings/db';\nimport fetcher from '@utils/fetcher';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowCreateChannelModal: (flag: boolean) => void;\n}\n\nconst CreateChannelModal: VFC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\n  // useParams를 이용하여 state 줄이기\n  // 주소 자체가 어느 정도 데이터를 저장하는 역할을 함!\n  // 즉, 따로 상태 관리를 해줄 필요가 없기 때문에 관리할 요소가 줄어듦\n  // - 워크스페이스, 채널을 옮길 때마다 어디에 있는지 상태에 저장하고 수정해야 하는데\n  // - 주소에서 데이터를 가져올 수 있으므로 신경 쓸 요소가 줄어들게 됨\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n\n  const {\n    // destructuring alias\n    // - import { Redirect as R } from \"react-router\" 도 가능\n    data: userData,\n    isLoading,\n    error,\n    mutate,\n  } = useSWR<IUser | false>(`${process.env.REACT_APP_API_URL}/api/users`, fetcher, {\n    revalidateOnMount: true,\n  });\n\n  const { data: channelData, mutate: mutateChannelData } = useSWR<IChannel[]>(\n    userData ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n    {\n      revalidateOnMount: true,\n    },\n  );\n\n  const onCreateChannel = useCallback(\n    (e) => {\n      e.preventDefault();\n      axios\n        .post(\n          `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels`,\n          { name: newChannel },\n          { withCredentials: true },\n        )\n        .then((response) => {\n          setShowCreateChannelModal(false);\n          // GET 요청 보내지 않고 update\n          mutateChannelData([...channelData!, response.data], { revalidate: false });\n          setNewChannel('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newChannel],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onCreateChannel}>\n        <Label id=\"channel-label\">\n          <span>채널 이름</span>\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\n        </Label>\n        <Button type=\"submit\">생성하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default CreateChannelModal;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & img {\n    margin-right: 5px;\n  }\n`;\n","import styled from '@emotion/styled';\n// MentionsInput : react-mentions에서 제공하는 컴포넌트\n// 사용 방법\n// - Mention의 부모 컴포넌트는 반드시 MentionsInput이어야 함!\n// - e.g. <MentionsInput><Mention></Mention></MentionsInput>;\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\n// styled.textarea`` : <textarea> 태그에 css 적용\n// styled(MentionsInput)`` : 기존에 있는 컴포넌트에다가 css 적용!\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  max-height: 500px;\n\n  & strong {\n    background: skyblue;\n  }\n\n  & textarea {\n    height: 40px;\n    overflow: auto;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\n// 1. emotion에서도 변수 사용 가능!\n// - 원래 css에서는 변수를 사용하기 위해서는 모든 경우의 수를 클래스로 만들었음\n// - focus === true ? 코드를 추가 : 코드를 제외\n\n// 2. js에서 함수 호출 방법\n// - 1) foo(); foo.call(); foo.apply(); foo.bind()();\n// - 2) foo``; tagged template literal(`` string parameter)\n// - 템플릿 리터럴이기 때문에 이런 식으로도 가능 : foo`${() => {}}`; foo`${() => `${() => ``}`}`;\n// - e.g. styled.button : styled 객체 안에 있는 함수(메서드)\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n\n  & img {\n    margin-right: 5px;\n  }\n\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import React, { FC, useCallback, useRef, useEffect, RefObject, forwardRef, useState } from 'react';\nimport { Form, SendButton, Toolbox, MentionsTextarea, ChatArea, EachMention } from '@components/ChatBox/style';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport { useParams } from 'react-router';\n// react-mentions\n// - 입력 창에서 @로 mention을 가능하게 하는 기능\n// <MentionsInput />\n// - inputRef : ref를 전달할 props 이름\n// <Mention />\n// - 반드시 MentionsInput가 부모 컴포넌트가 되어야 함\n// - appendSpaceOnAdd : 입력을 완료했을 때, 마지막에 space 1개를 추가\n// - trigger=\"@\" : mention 기능을 시작할 trigger\n// - allowSuggestionsAboveCursor : input box보다 위에 suggestion을 위치\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport { IUser } from '@typings/db';\nimport gravatar from 'gravatar';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder: string;\n}\n\n// 여기서 DM 매시지 보내기 로직을 작성하면 안 됨!\n// - 채널 컴포넌트에서도 이 ChatBox 컴포넌트를 _재사용할_ 것이기 때문\n// - props를 이용하여 부모 컴포넌트에서 대신 처리하는 방법이 필요!\nconst ChatBox = forwardRef<HTMLTextAreaElement, Props>(({ chat, onSubmitForm, onChangeChat, placeholder }, ref) => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const [isMaxHeight, setIsMaxHeight] = useState(false);\n  const { data: memberData } = useSWR<IUser[]>(\n    `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/members`,\n    fetcher,\n  );\n  const { data: userData } = useSWR<IUser | false>(`${process.env.REACT_APP_API_URL}/api/users`, fetcher);\n\n  // https://velog.io/@corinthionia/JS-keydown%EC%97%90%EC%84%9C-%ED%95%9C%EA%B8%80-%EC%9E%85%EB%A0%A5-%EC%8B%9C-%EB%A7%88%EC%A7%80%EB%A7%89-%EC%9D%8C%EC%A0%88%EC%9D%B4-%EC%A4%91%EB%B3%B5-%EC%9E%85%EB%A0%A5%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0-%ED%95%A8%EC%88%98%EA%B0%80-%EB%91%90-%EB%B2%88-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\n  const onKeyDownChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        if (e.nativeEvent.isComposing === false && !e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n  // useCallback 의존성 배열\n  // - 콜백 함수 내에서 사용되는 외부 변수 / 함수는 무조건 넣어주는 것이 좋음\n\n  // renderSuggestion?: ((suggestion: SuggestionDataItem, search: string, highlightedDisplay: React.ReactNode, index: number, focused: boolean) => React.ReactNode) | undefined;\n  // - params : suggestion, search, highlightedDisplay, index, focused\n  // - return : React.ReactNode\n\n  // mention의 결과 : @[아잉눈](1)\n  // - 다른 형식으로 바꿔주고 싶음 => 일정한 형식으로 되어 있으므로 regexify-string 라이브러리를 이용하여 일괄적으로 변환\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focused: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n\n      return (\n        // focus props\n        <EachMention focus={focused}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  // https://stackoverflow.com/questions/65876809/property-current-does-not-exist-on-type-instance-htmldivelement-null\n  useEffect(() => {\n    if (ref && 'current' in ref && ref.current) {\n      parseInt(ref.current.style.height, 10) >= 500 ? setIsMaxHeight(true) : setIsMaxHeight(false);\n    }\n  }, [chat]);\n\n  if (!memberData || !userData) return null;\n\n  // area-hidden=\"true\"\n  // - 해당 요소의 내용이 스크린리더에 읽히지 않도록 설정\n  // - 일반적으로 대화형이 아닌 요소(e.g. 아이콘, 장식 요소) 또는 스크린리더에 의해 중복되거나 설명이 필요하지 않은 요소에 사용\n  // - cf> 이 속성을 사용할 때, 접근성에 영향을 미치지 않는지 신중하게 판단해야 함\n\n  // textarea, input 등 입력 태그 : [ value 속성, onChange 속성 ] 항상 같이 다님\n  // - value 속성이 존재하지 않는다면? setChat('')을 통해 값이 바뀌지 않음\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          placeholder={placeholder}\n          onChange={onChangeChat}\n          onKeyDown={onKeyDownChat}\n          inputRef={ref}\n          style={isMaxHeight ? { overflowY: 'auto' } : {}}\n          forceSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            onClick={onSubmitForm}\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" area-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n});\n\nexport default ChatBox;\n\n// 문제\n// 1. 메시지를 전송하고 나서 setChat('') 후에도 textarea height가 그대로 유지\n// - onSubmitForm 함수가 부모 컴포넌트로부터 props로 받았기 때문에\n// - textRef를 부모 컴포넌트로 뺴고, forwardRef를 이용하여 props로 넘김\n// - onSubmitForm에서 메시지 전송 후, textareaRef.current.style.height = '40px'로 원상 복구\n// 2. autosize가 무작정 길어지는 현상\n// - <MentionsTextarea /> max-height: 500px; 추가\n// 3. overflow 속성이 없어 아래로 무한정 튀어나가는 문제\n// - <MentionsTextarea /> overflow : auto 추가\n// 4. <Mention />이 textarea 뒤에 위치해 가려지는 문제\n// - 이유는 잘 모르겠지만, overflow 속성이 존재하면 안 됨\n// - height : 0 ~ 500px일 때 => overflow 속성을 없애기\n// - styled component의 props 기능을 이용하여 특정 조건에서 overflow 속성을 주기\n// - 특정 조건은 useRef와 useState(isMaxHeight)를 이용하여 관리\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\n// position : sticky\n// - 평소에는 일반 요소처럼 있다가, 특정 높이가 되면(화면에서 나가면) fixed 처럼 바뀜\n// - e.g. 슬랙에서 날짜 표시가 위로 올라가면 상단에 붙는 효과\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 20px;\n\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n\n  &:hover {\n    background: #eee;\n  }\n\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n\n  & .chat-text {\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1;\n\n    & p {\n      flex: 0 0 100%;\n      margin: 0;\n    }\n  }\n\n  & .chat-user {\n    display: flex;\n    flex: 0 0 100%;\n    align-items: center;\n\n    & > b {\n      margin-right: 5px;\n    }\n\n    & > span {\n      font-size: 12px;\n    }\n  }\n\n  & a {\n    text-decoration: none;\n    color: deepskyblue;\n  }\n`;\n","import { IChat, IDM } from '@typings/db';\nimport React, { VFC, memo, useMemo } from 'react';\nimport { ChatWrapper } from '@components/Chat/style';\nimport gravatar from 'gravatar';\nimport { Link, useParams } from 'react-router-dom';\n// regexify-string\n// - 정규표현식에 관한 API를 제공해주는 라이브러리\nimport regexifyString from 'regexify-string';\n// dayjs\n// - immutable : 복사를 하는 경우, 참조 관계가 유지되지 않음\n// - 가벼움\n// - moment와 API와 비슷\n// - vs. date-fns : Lodash 스타일\n// - vs. Luxon : moment의 새로운 라이브러리\nimport dayjs from 'dayjs';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\nconst Chat: VFC<Props> = ({ data }) => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  // 타입 가드\n  // 1. in (js 문법) : 객체 안에 property가 존재하는지?\n  // - Sender : dm에만 들어있는 속성\n  // 2. if (typeof a === 'string') a.slice()... : if문으로 감싸주면, type을 알아서 추론\n  const user = 'Sender' in data ? data.Sender : data.User;\n\n  // \\d : 숫자\n  // * : 0개 이상\n  // + : 1개 이상\n  // ? : 0개나 1개\n\n  // useMemo : regex가 의외로 성능이 안 좋기 때문에, caching(memoization)을 해주면 좋음\n  const result = useMemo(\n    () =>\n      // uploads/ 로 시작하는 경우, <img /> 적용\n      data.content.startsWith('uploads/') ? (\n        <img src={`${process.env.REACT_APP_API_URL}/${data.content}`} style={{ maxHeight: 200 }} />\n      ) : (\n        regexifyString({\n          input: data.content,\n          pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n          decorator(match, index) {\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n            if (arr) {\n              return (\n                <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                  @{arr[1]}\n                </Link>\n              );\n            }\n            // \\n을 줄바꿈 태그로 바꾸는 코드\n            return <br key={index} />;\n          },\n        })\n      ),\n    [data.content],\n  ); // input(data.content)이 바뀔 때, result를 다시 계산\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.nickname, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n};\n\nexport default memo(Chat);\n","import React, { useCallback, useRef, VFC, forwardRef } from 'react';\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/style';\n// react-custom-scrollbars\n// 진짜 화면의 스크롤은 없어지고, 가상 커스텀 스크롤을 만들어주는 라이브러리\n// scroll bar : div 역할 => 가로로 배치되는 것을 처리\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { IDM, IChat } from '@typings/db';\nimport Chat from '@components/Chat';\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/ko';\n\ndayjs.locale('ko');\n\n// chatData는 없을 수도 있음\n// optional chaning : undefined와 null을 걸러줌\n// chatData && ~의 느낌\ninterface Props {\n  chatSections?: { [key: string]: IDM[] | IChat[] };\n  setSize: (size: number | ((_size: number) => number)) => Promise<IDM[][] | IChat[][] | undefined>;\n  isEmpty: boolean;\n  refCopy: Scrollbars | undefined;\n  isReachingEnd: boolean;\n}\n// chat : 공통 컴포넌트이고, swr로부터 가져오는 데이터가 다르기 때문에 props로 결정\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isEmpty, isReachingEnd, refCopy }, ref) => {\n  // reverse infinite scrolling : 과거 채팅 불러오기 구현을 위해\n  // - 원래는 아래 방향(infinite scrolling)으로 하는데, 채팅 특성 상 과거 데이터를 불러와야 하므로\n\n  // ref를 부모 컴포넌트에서도 사용해야 하기 때문에\n  // const scrollbarRef = useRef(null);\n\n  // <Scrollbars /> react-custom-scrollbars 컴포넌트의 onScroll 이벤트\n  // - 기본 onScroll 이벤트의 콜백 함수는 UIEventHandler type : (e : any) => void\n  // - 이 라이브러리는 추가로 values parameter를 제공\n  // - https://github.com/malte-wessel/react-custom-scrollbars/blob/master/docs/v2-documentation.md#customization\n  const onScroll = useCallback(\n    (values) => {\n      // console.log(values);\n      if (values.scrollTop === 0 && !isReachingEnd && !isEmpty) {\n        // data re-fetching\n        setSize((prev: number) => prev + 1).then(() => {\n          // 스크롤 위치 유지\n          if (refCopy) {\n            // refCopy 안의 values 객체 중에 scroll 관련 값들을 일일이 찾아봐야 함...\n            // console.log(refCopy?.getScrollHeight(), values.scrollHeight);\n            refCopy.scrollTop(refCopy?.getScrollHeight() - values.scrollHeight);\n          }\n        });\n      }\n    },\n    [isReachingEnd, isEmpty, refCopy],\n  );\n\n  // 채팅 메시지 그룹화\n  // - 날짜 등으로 그룹화되지 않은 raw data를 서버로 부터 받아옴\n  // - 프런트에서 날짜별 그룹화를 진행\n\n  // 프런트와 백의 알고리즘(데이터 가공)\n  // - 프런트에서 알고리즘(데이터 가공 : 정렬, 그룹화, 구역 분할 등)을 많이 적용하는 추세\n  // - 즉, 백에서는 데이터만 받아오고 프런트에서 알고리즘을 적용\n  // 백에서 연산을 하는 방법\n  // - 장점) 프런트에서 처리하기가 쉬움, 프런트보다는 보안에 강함\n  // - 단점) 서버 본연의 역할에 영향이 갈 수도 있음\n  // 프런트에서 연산을 하는 방법\n  // - 장점) 일종의 분산 컴퓨팅(서버에 무리가 덜 감)\n  // - 단점) 프런트는 보안에 취약함\n  // 서버가 다운되면 모든 고객을 잃지만, 프런트 몇몇 브라우저에서 느리게 로딩되는 것은 소수의 고객에 한정될 수 있음\n  // **결론 : 보안에 위협되지 않으면서, 브라우저에서 버벅되지 않을만큼 프런트에서 데이터 가공을 담당하는 것이 좋음!**\n\n  // Array element 기준 반복문 : Array.map()\n  // Object key 기준 반복문 : Object.entries().map()\n  // - Object.entries() : 객체가 배열로 변환\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={ref} onScrollFrame={onScroll}>\n        {chatSections &&\n          Object.entries(chatSections).map(([date, chats]) => {\n            return (\n              <Section className={`section-${date}`} key={date}>\n                <StickyHeader>\n                  <button>{dayjs(date).format('M월 D일 dddd')}</button>\n                </StickyHeader>\n                {chats?.map((chat, index) => (\n                  <Chat key={chat.id + index} data={chat} />\n                ))}\n              </Section>\n            );\n          })}\n      </Scrollbars>\n    </ChatZone>\n  );\n});\n\nexport default ChatList;\n","import { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection<T extends IDM | IChat>(chatList: T[]) {\n  const sections: { [key: string]: T[] } = {};\n\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n\n  return sections;\n}\n","import axios from 'axios';\nimport { useCallback } from 'react';\nimport io from 'socket.io-client';\nimport { Socket } from 'socket.io-client';\n\n// socket-io는 React와 그렇게 잘 어울리지 않음\n// - 컴포넌트에 socket을 종속시킨 경우, 다른 컴포넌트로 이동 시 socket 연결이 해제될 수 있음\n// - 이 문제를 방지하기 위해, 공통된 컴포넌트에 소켓을 설정(e.g. App.tsx, Workspace.tsx)\n// - 가장 상위 컴포넌트에 위치하게 되므로\n// - 1. HOC를 통해 props로 socket을 넘기는 방법\n// - 2. hooks을 통해 socket을 설정하는 방법\n// - 만약, 부모 컴포넌트에 socket을 생성할 수 있다면 생성\n// - 아니라면, hook에 생성\n\n// socket 계층\n// namespace - workspace\n// room - channel\n// - 계층을 잘 살펴서 보내야 함, 아니면 원하지 않은 결과(모두에게 전송)가 나타날 수도\n\n// 동시에 여러 workspace에 접속할 수 있기 때문에\n// type : 빈 객체나 배열([], {})인 경우에는 type을 적어줘야 함\nconst sockets: { [key: string]: Socket } = {};\n\n// socket.emit() type 에러\n// - return type을 적어주면 해결\nconst useSocket = (workspace?: string): [Socket | undefined, () => void] => {\n  // 스코프 문제\n  // workspace가 undefined일 때를 막아주는 코드가 아래 있고, disconnect 선언이 위에 있어야 하는 상황\n\n  // 문제점?\n  // - workspace가 undefined일 경우 런타임 오류 발생\n  // - Type 'undefined' cannot be used as an index type.\n  //   const disconnect = sockets[workspace].disconnect;\n\n  //   if (!workspace) {\n  //     return [undefined, disconnect];\n  //   }\n\n  // 해결 : useCallback()을 사용하여 함수로 바꿔줌\n  // - 일단 먼저 생성해놓고, workspace가 초기화될 때 다시 생성?\n  const disconnect = useCallback(() => {\n    if (workspace) {\n      sockets[workspace].disconnect();\n      // disconnect 했다면, socket 객체에서 삭제\n      delete sockets[workspace];\n    }\n  }, [workspace]);\n\n  if (!workspace) return [undefined, disconnect];\n\n  // 소켓이 이미 존재한다면, 생성하지 않음\n  if (!sockets[workspace]) {\n    // io(url)\n    // - url : defaults tp window.location.host\n    // - pathname에 따라 새로운 namespace socket이 반환\n    // - 하나의 클라이언트와 하나의 서버는 각각 namespace에 대해서 multiplexing 방식으로 동작\n    sockets[workspace] = io(`${process.env.REACT_APP_API_URL}/ws-${workspace}`, {\n      transports: ['websocket'],\n    });\n  }\n\n  // polling error(CORS)\n  // - socket.io는 먼저 요청을 http 방식으로 보내고, 나중에 웹 소켓 방식으로 전환\n  // - why? IE 같은 경우 웹 소켓이 존재하지 않기 때문에, http 요청으로 먼저 연결\n  // - 웹 소켓이 있는 것이 확인되었다면 웹 소켓으로 전환\n  // - 처음부터 polling 하지 말고, 웹 소켓만 써라 => { transports: ['websocket'] } 옵션\n\n  // workspace에서 이동하는 경우\n  // - 기존 workspace의 socket 연결을 끊어야 하기 때문에 disconnect()\n  // - 만약, 끊지 않는다면 두 workspace의 메시지를 같이 받게 됨\n  // - 어떤 문제가 발생 가능? 접속 중이 아닌데 접속 중으로 오해? / 메시지가 workspace를 구분하지 않고 오게 됨?\n\n  return [sockets[workspace], disconnect];\n};\n\nexport default useSocket;\n","import { IChat, IDM } from '@typings/db';\n\nexport default function combineOldNewChats<T extends IChat | IDM>(chatData: T[][], newChatData: T[]) {\n  const added: T[][] = new Array<T[]>();\n\n  added.push([...newChatData].sort((a, b) => b.id - a.id));\n  chatData.map((v) => added.push(v.sort((a, b) => b.id - a.id)));\n\n  return added;\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  // flex-flow는 flex-direction과 flex-wrap 두 가지 속성을 한 번에 설정하는 단축 속성\n  // e.g. \"flex-flow: row wrap;\"은 \"flex-direction: row;\"와 \"flex-wrap: wrap;\"을 동시에 설정한 것과 같음\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import React, { useCallback, VFC, useRef, useEffect, useState, RefObject, useMemo } from 'react';\nimport Workspace from '@layouts/Workspace';\nimport { Container, Header } from '@pages/DirectMessage/style';\nimport gravatar from 'gravatar';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport fetcher from '@utils/fetcher';\nimport ChatBox from '@components/ChatBox';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport ChatList from '@components/ChatList';\nimport { toast } from 'react-toastify';\nimport { IDM } from '@typings/db';\n// ref를 이용하여 input, textarea 등 태그를 직접 css를 바꿔주는 라이브러리!\nimport autosize from 'autosize';\nimport makeSection from '@utils/makeSection';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\nimport combineOldNewChats from '@utils/combineOldNewChats';\nimport { DragOver } from '@pages/Channel/style';\n\n// http 요청을 보냈는데 JSON이 아니라 html이 오는 경우?\n// - 1. 404 : 없는 리소스에 요청한 경우\n// - 2. 304 : 성공했는데 html로 오는 경우여도 없는 리소스일 가능성이 높음\n\nconst DirectMessage: VFC = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const [newChatData, setNewChatData] = useState<IDM[]>([]);\n  const { data: userData } = useSWR(\n    `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/users/${id}`,\n    fetcher,\n  );\n  const { data: myData } = useSWR(`${process.env.REACT_APP_API_URL}/api/users`, fetcher);\n  // useSWRInfinite\n  // - 1. 첫 번째 인자 : 함수화, params(index : 계속 증가하면서 새로운 페이지를 가져오는 역할)\n  // - 2. setSize : setState와 비슷한 역할! 페이지 수(state)를 바꿔주는 역할, type : (size: number | ((_size: number) => number)) => Promise<IDM[][] | undefined>\n  // - 3. return data type이 2차원 배열(페이지마다 배열 추가) : 새로 불러오는 페이지를 push_front()\n  // - 4. 아래 두 변수를 선언해주면 좋음\n  // - 1) const isEmpty = chatData?.[0]?.length === 0;\n  // - 데이터를 가져왔는데, 비어있는 경우\n  // - 2) const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20);\n  // - 데이터를 가져오려는 양보다 적게 데이터를 가져오는 경우(isEmpty === true ? isReachingEnd === true)\n  // - e.g.\n  // - 40 = 20 + 20 + 0 (isEmpty : true, isReachingEnd : true)\n  // - 45 = 20 + 20 + 5 (isEmpty : false, isReachingEnd : true)\n  const {\n    data: chatData,\n    mutate: mutateChatData,\n    setSize,\n  } = useSWRInfinite<IDM[]>(\n    (index: number) =>\n      `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n    { revalidateOnFocus: false },\n  );\n  const [socket] = useSocket(workspace);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const [dragOver, setDragOver] = useState(false);\n\n  const isEmpty = chatData?.[0]?.length === 0;\n  // undefined가 될 수 있기 때문에 뒤에 || false 추가\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  // https://velog.io/@cnsrn1874/%EB%B2%88%EC%97%AD-callback-refs-%EC%82%AC%EC%9A%A9%EC%9C%BC%EB%A1%9C-useEffect-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\n  // Callback ref를 이용하여, 렌더링 이후에 DOM 노드에 실행시킬 작업을 콜백 함수로 만드는 방법\n  // - 어느 정도 문제는 해결되었지만, 현재 컴포넌트에서 사용할 ref object를 생성하지 못함\n  // - 일단 사용할 수는 없는 듯\n  // const scrollbarRef = useRef<Scrollbars>(null);\n  // callback 함수에서 나중에 state로 설정!\n  const [scrollbarRefCopy, setScrollbarRefCopy] = useState<Scrollbars>();\n  // 이 방식은 callback 함수에서 복사할 수 없음. why?\n  // let scrollbarRef: any;\n\n  const scrollbarRefCallback = useCallback(\n    (node) => {\n      if (node !== null) {\n        setScrollbarRefCopy(node);\n        // 이 방식은 callback 함수에서 복사할 수 없음. why?\n        // scrollbarRef = node;\n        if (chatData?.length === 1) {\n          node.scrollToBottom();\n          // console.log(node.getValues());\n        }\n      }\n    },\n    [chatData],\n  );\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, [chat]);\n\n  useEffect(() => {\n    setNewChatData([]);\n  }, [id, chatData]);\n\n  // 여기서 ref가 연결된 이후에 다시 렌더링시키지 못하기 때문에\n  // - 직접적인 해결방법은 아니지만, 비슷한 state를 넣는 방법?\n  // useEffect(() => {\n  //   console.log('useEffect : ', chatData, chatData?.length);\n  //   if (chatData?.length === 1) {\n  //     scrollbarRef.current?.scrollToBottom();\n  //     console.log(scrollbarRef.current?.getClientHeight());\n  //   }\n  // }, [chatData]);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData) {\n        // optimistic UI\n        // UI에 추가 => 요청 => revalidate\n        const savedChat = chat;\n        mutateChatData(\n          (prevChatData) => {\n            setNewChatData((prevNewChatData) => [\n              {\n                id: (prevNewChatData.length !== 0 ? prevNewChatData[0]?.id : chatData[0][0]?.id || 0) + 1,\n                content: savedChat,\n                SenderId: myData.id,\n                Sender: myData,\n                ReceiverId: userData.id,\n                Receiver: userData,\n                createdAt: new Date(),\n              },\n              ...prevNewChatData,\n            ]);\n            return prevChatData;\n          },\n          // optimistic UI할 때는 shouldRevalidate should be false\n          { revalidate: false },\n        ).then(() => {\n          // 채팅 메시지를 보내도 읽은 시간 초기화\n          localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n          setChat('');\n          if (textareaRef.current) {\n            textareaRef.current.style.height = '40px';\n          }\n          scrollbarRefCopy?.scrollToBottom();\n        });\n        axios\n          .post(\n            `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/dms/${id}/chats`,\n            { content: savedChat },\n            { withCredentials: true },\n          )\n          .then((response) => {\n            // mutateChatData();\n          })\n          .catch((error) => {\n            console.dir(error);\n            toast.error(error.response?.data, { position: 'bottom-center' });\n          });\n      }\n    },\n    [chat, chatData, myData, userData, workspace, id],\n  );\n\n  // Array.reverse() : mutable(기존 배열이 바뀌는 불상사) => [...chatData].reverse()\n  // Array<Array>.flat() : 2차원 배열을 1차원 배열로 immutable하게 바꿔주는 메서드\n  const chatSections = useMemo(\n    () =>\n      makeSection(\n        chatData\n          ? combineOldNewChats(chatData, newChatData)\n              .flat()\n              // .reverse()\n              .sort((a, b) => a.id - b.id) // id 오름차순 정렬\n          : [],\n      ),\n    [chatData, newChatData],\n  );\n\n  // data : 서버 소켓에서 전달해주는 format\n  const onMessage = useCallback(\n    (data: IDM) => {\n      // 현재 대회하고 있는 상대가 데이터를 보낸 상대 && 나 자신과의 대화가 아닐 때\n      // - 나 자신과의 대화일 경우? 아래 코드가 실행된다면 2번 채팅이 되는 결과\n      if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n        // 지금처롬 받자마자 추가하지 말고, 오면 몇 개의 메시지가 왔는지 표시하고\n        // 해당 버튼을 누르거나 아래로 드래그하면 그때 mutateChatData를 추가하는 방법?\n        mutateChatData(\n          (prevChatData) => {\n            // console.log(data);\n            setNewChatData((prevNewChatData) => [data, ...prevNewChatData]);\n            return prevChatData;\n          },\n          // revalidate를 켜면 요청을 받아오기 때문에, 실시간으로 데이터가 업데이트 되긴 함\n          { revalidate: false },\n        ).then(() => {\n          // 받은 메시지도 읽은 시간 초기화\n          localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n          // 스크롤이 제일 아래있을 때를 제외하고는, 남이 보낸 메시지는 스크롤바를 하단으로 내리지 않음\n          if (scrollbarRefCopy) {\n            if (\n              scrollbarRefCopy.getScrollHeight() <\n              scrollbarRefCopy.getClientHeight() + scrollbarRefCopy.getScrollTop() + 150\n            ) {\n              // console.log('scrollToBottom!', scrollbarRefCopy.getValues());\n              scrollbarRefCopy.scrollToBottom();\n            }\n          }\n        });\n      }\n    },\n    [chatData],\n  );\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 들어왔을 때 읽은 시간 초기화\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  }, [workspace, id]);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      // console.log(e);\n      // 서버로 _파일_을 보낼 떄는, JSON이 아니라 FormData를 많이 사용\n      const formData = new FormData();\n      // 브라우저마다 dataTransfer.items, files에 있는지 다름\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            // console.log('... file[' + i + '].name = ' + file.name);\n            // 하나의 formData에 여러 image file을 저장\n            formData.append('image', file);\n          } else return;\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          // console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n        setDragOver(false);\n        mutateChatData();\n      });\n    },\n    [workspace, id],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    if (e.dataTransfer.items) {\n      for (let i = 0; i < e.dataTransfer.items.length; i++) {\n        if (e.dataTransfer.items[i].kind !== 'file') return;\n      }\n    }\n    setDragOver(true);\n  }, []);\n\n  const onDragLeave = useCallback((e) => {\n    e.preventDefault();\n    setDragOver(false);\n  }, []);\n\n  if (!userData || !myData) return null;\n\n  // onDrop 이벤트(마우스 버튼에서 손을 떼는 순간) : 이미지를 서버에 업로드\n  // onDragOver 이벤트(드래그 하는 시간 동안) : 업로드 화면으로 렌더링\n  // drop zone : 두 이벤트가 발생하는 공간\n  // cf> input type file()도 적용해보기! => <input type=\"files\" multiple onChange={onChangeFile} />\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <img src={gravatar.url(userData?.nickname, { s: '36px', d: 'retro' })} alt={userData.email} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList\n        ref={scrollbarRefCallback}\n        refCopy={scrollbarRefCopy}\n        chatSections={chatSections}\n        setSize={setSize}\n        isEmpty={isEmpty}\n        isReachingEnd={isReachingEnd}\n      />\n      <ChatBox\n        ref={textareaRef}\n        chat={chat}\n        onSubmitForm={onSubmitForm}\n        onChangeChat={onChangeChat}\n        placeholder={`${userData.nickname}에 메시지 보내기`}\n      />\n      {dragOver && <DragOver onDragLeave={onDragLeave}>드래그 앤 드롭하여 업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n","import React, { useCallback, VFC } from 'react';\nimport Modal from '@components/Modal';\nimport { Button, Input, Label } from '@pages/SignUp/style';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\nimport { IUser, IChannel } from '@typings/db';\nimport fetcher from '@utils/fetcher';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\n\nconst InviteChannelModal: VFC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n\n  const { data: userData } = useSWR<IUser>(`${process.env.REACT_APP_API_URL}:/api/users`, fetcher);\n  // 채널의 멤버 목록을 최신화하는 mutate\n  // **여기서 data를 가져오지 않아도, 모든 컴포넌트에서 캐시를 공유하기 때문에 다른 어떤 컴포넌트에서 그냥 data를 가져다 쓰면 됨!**\n  const { mutate: mutateChannelMembers } = useSWR<IChannel[]>(\n    userData ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback((e) => {\n    e.preventDefault();\n    if (!newMember || !newMember.trim()) return;\n    axios\n      .post(\n        `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels/${channel}/member`,\n        { email: newMember },\n        { withCredentials: true },\n      )\n      .then((response) => {\n        // response에서 받은 data로 추가하는 것은 아니고, 새로 요청을 하여 캐시를 업데이트\n        mutateChannelMembers();\n        setShowInviteChannelModal(false);\n        setNewMember('');\n      })\n      .catch((error) => {\n        console.dir(error);\n        toast.error(error.response?.data, { position: 'bottom-center' });\n      });\n  }, []);\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import React, { useCallback, VFC, useRef, useEffect, useState, RefObject, useMemo } from 'react';\nimport Workspace from '@layouts/Workspace';\nimport { Container, Header } from '@pages/Channel/style';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport fetcher from '@utils/fetcher';\nimport ChatBox from '@components/ChatBox';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport ChatList from '@components/ChatList';\nimport { toast } from 'react-toastify';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport autosize from 'autosize';\nimport makeSection from '@utils/makeSection';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\nimport combineOldNewChats from '@utils/combineOldNewChats';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport { DragOver } from '@pages/Channel/style';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newChatData, setNewChatData] = useState<IChat[]>([]);\n\n  const { data: myData } = useSWR(`${process.env.REACT_APP_API_URL}/api/users`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChatData,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index: number) =>\n      `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${\n        index + 1\n      }`,\n    fetcher,\n    { revalidateOnFocus: false },\n  );\n  const { data: channelData } = useSWR<IChannel>(\n    `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels/${channel}`,\n    fetcher,\n    { revalidateOnFocus: false },\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n    { revalidateOnFocus: false },\n  );\n  const [socket] = useSocket(workspace);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [scrollbarRefCopy, setScrollbarRefCopy] = useState<Scrollbars>();\n\n  const scrollbarRefCallback = useCallback(\n    (node) => {\n      if (node !== null) {\n        setScrollbarRefCopy(node);\n        if (chatData?.length === 1) {\n          node.scrollToBottom();\n        }\n      }\n    },\n    [chatData],\n  );\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, [chat]);\n\n  useEffect(() => {\n    setNewChatData([]);\n  }, [channel, chatData]);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChatData(\n          (prevChatData) => {\n            setNewChatData((prevNewChatData) => [\n              {\n                id: (prevNewChatData.length !== 0 ? prevNewChatData[0]?.id : chatData[0][0]?.id || 0) + 1,\n                content: savedChat,\n                UserId: myData.id,\n                User: myData,\n                ChannelId: channelData.id,\n                Channel: channelData,\n                createdAt: new Date(),\n              },\n              ...prevNewChatData,\n            ]);\n            return prevChatData;\n          },\n          { revalidate: false },\n        ).then(() => {\n          localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n          setChat('');\n          if (textareaRef.current) {\n            textareaRef.current.style.height = '40px';\n          }\n          scrollbarRefCopy?.scrollToBottom();\n        });\n        axios\n          .post(\n            `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels/${channel}/chats`,\n            { content: savedChat },\n            { withCredentials: true },\n          )\n          .then((response) => {\n            // mutateChatData();\n          })\n          .catch((error) => {\n            console.dir(error);\n            toast.error(error.response?.data, { position: 'bottom-center' });\n          });\n      }\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const chatSections = useMemo(\n    () =>\n      makeSection(\n        chatData\n          ? combineOldNewChats(chatData, newChatData)\n              .flat()\n              .sort((a, b) => a.id - b.id)\n          : [],\n      ),\n    [chatData, newChatData],\n  );\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // image chat은 optimistic UI가 적용되어 있지 않기 때문에\n      if (data.Channel.name === channel && (data.content.startsWith('uploads/') || myData?.id !== data.UserId)) {\n        mutateChatData(\n          (prevChatData) => {\n            setNewChatData((prevNewChatData) => [data, ...prevNewChatData]);\n            return prevChatData;\n          },\n          { revalidate: false },\n        ).then(() => {\n          localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n          if (scrollbarRefCopy) {\n            if (\n              scrollbarRefCopy.getScrollHeight() <\n              scrollbarRefCopy.getClientHeight() + scrollbarRefCopy.getScrollTop() + 150\n            ) {\n              // console.log('scrollToBottom!', scrollbarRefCopy.getValues());\n              scrollbarRefCopy.scrollToBottom();\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n  }, [workspace, channel]);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      // 서버로 _파일_을 보낼 떄는, JSON이 아니라 FormData를 많이 사용\n      const formData = new FormData();\n      // 브라우저마다 dataTransfer.items, files에 있는지 다름\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            // console.log('... file[' + i + '].name = ' + file.name);\n            // 하나의 formData에 여러 image file을 저장\n            formData.append('image', file);\n          } else return;\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          // console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios\n        .post(`${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels/${channel}/images`, formData)\n        .then(() => {\n          localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n          setDragOver(false);\n          mutateChatData();\n        });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    if (e.dataTransfer.items) {\n      for (let i = 0; i < e.dataTransfer.items.length; i++) {\n        if (e.dataTransfer.items[i].kind !== 'file') return;\n      }\n    }\n    setDragOver(true);\n  }, []);\n\n  const onDragLeave = useCallback((e) => {\n    e.preventDefault();\n    setDragOver(false);\n  }, []);\n\n  if (!myData) return null;\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList\n        ref={scrollbarRefCallback}\n        refCopy={scrollbarRefCopy}\n        chatSections={chatSections}\n        setSize={setSize}\n        isEmpty={isEmpty}\n        isReachingEnd={isReachingEnd}\n      />\n      <ChatBox\n        ref={textareaRef}\n        chat={chat}\n        onSubmitForm={onSubmitForm}\n        onChangeChat={onChangeChat}\n        placeholder={`#${channel}에 메시지 보내기`}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      {dragOver && <DragOver onDragLeave={onDragLeave}>드래그 앤 드롭하여 업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default Channel;\n","import React, { VFC, useState, useCallback } from 'react';\nimport Modal from '@components/Modal';\nimport { Label, Input, Button } from '@pages/SignUp/style';\nimport useInput from '@hooks/useInput';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\nimport { IUser, IChannel } from '@typings/db';\nimport fetcher from '@utils/fetcher';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\n}\n\nconst InviteWorkspaceModal: VFC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData } = useSWR<IUser>(`${process.env.REACT_APP_API_URL}:/api/users`, fetcher);\n  // 워크스페이스의 멤버 목록을 최신화하는 mutate\n  // **여기서 data를 가져오지 않아도, 모든 컴포넌트에서 캐시를 공유하기 때문에 다른 어떤 컴포넌트에서 그냥 data를 가져다 쓰면 됨!**\n  // why mutate?\n  // - SWR은 캐시된 데이터를 무효화하고 다시 data fetching\n  // - => 데이터를 갱신하고 UI를 업데이트\n  // - 새 멤버를 초대하면 서버로 요청을 보내고 성공적으로 응답이 오면 mutateWorkspaceMembers 함수를 호출하여 채널 데이터를 갱신\n  // - **이를 통해 화면에 실시간으로 새 멤버가 추가된 채널 목록을 업데이트할 수 있음**\n  // - 초대받은 유저는 일단 워크스페이스 또는 채널에 추가되는 방식\n  const { mutate: mutateWorkspaceMembers } = useSWR<IChannel[]>(\n    userData ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) return;\n      axios\n        .post(\n          `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/members`,\n          { email: newMember },\n          { withCredentials: true },\n        )\n        .then((response) => {\n          // response에서 받은 data로 추가하는 것은 아니고, 새로 요청을 하여 캐시를 업데이트\n          mutateWorkspaceMembers();\n          setShowInviteWorkspaceModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [workspace, newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>이메일</span>\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteWorkspaceModal;\n","import styled from '@emotion/styled';\n\n// collapse button : 접었다 폈다하는 버튼\n// 아래와 같은 방법으로 props에 따라 css를 다르게 구성할 수 있음\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\n  background: transparent;\n  border: none;\n  width: 26px;\n  height: 26px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  margin-left: 10px;\n  cursor: pointer;\n\n  // 조건부 CSS 스타일을 적용하기 위한 템플릿 리터럴 문법\n  // true인 경우 i 요소의 transform 스타일이 초기화\n  ${({ collapse }) =>\n    collapse &&\n    `\n    & i {\n      transform: none;\n    }\n  `};\n`;\n","import React, { VFC, useEffect } from 'react';\nimport { IUser } from '@typings/db';\nimport { NavLink, useParams } from 'react-router-dom';\nimport gravatar from 'gravatar';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport { useLocation } from 'react-router-dom';\n\ninterface Props {\n  member: IUser;\n  isOnline: boolean;\n}\n\nconst EachDM: VFC<Props> = ({ member, isOnline }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const location = useLocation();\n  const { data: userData } = useSWR<IUser>(`${process.env.REACT_APP_API_URL}/api/users`, fetcher, {\n    revalidateOnMount: true,\n  });\n  const date = localStorage.getItem(`${workspace}-${member.id}`);\n  const { data: count, mutate } = useSWR<number>(\n    userData\n      ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/dms/${member.id}/unreads?after=${date}`\n      : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (location.pathname === `/workspace/${workspace}/dm/${member.id}`) {\n      mutate(0);\n    }\n  }, [location.pathname, workspace, member]);\n\n  return (\n    <NavLink\n      key={member.id}\n      activeStyle={{ fontWeight: 'bold', color: 'white' }}\n      to={`/workspace/${workspace}/dm/${member.id}`}\n    >\n      <div style={{ position: 'relative', width: '35px', height: '30px' }}>\n        <img\n          className=\"c-base_icon c-base_icon--image\"\n          style={{ position: 'absolute', top: '0', left: '0' }}\n          src={gravatar.url(member.nickname, { s: '25px', d: 'retro' })}\n          alt={member.email}\n        />\n\n        <i\n          className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\n            isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\n          }`}\n          aria-hidden=\"true\"\n          data-qa=\"presence_indicator\"\n          data-qa-presence-self=\"false\"\n          data-qa-presence-active=\"false\"\n          data-qa-presence-dnd=\"false\"\n          style={{ top: '10px', left: '15px' }}\n        />\n      </div>\n      <span className={count && count > 0 ? 'bold' : undefined}>{member.nickname}</span>\n      {member.id === userData?.id && <span> (나)</span>}\n      {(count && count > 0 && <span className=\"count\">{count}</span>) || null}\n    </NavLink>\n  );\n};\n\nexport default EachDM;\n","import { IUser, IUserWithOnline } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { VFC, useCallback, useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport { CollapseButton } from '@components/DMList/style';\nimport { NavLink } from 'react-router-dom';\nimport useSocket from '@hooks/useSocket';\nimport gravatar from 'gravatar';\nimport EachDM from '@components/EachDM';\n\n// userData : 왜 swr로 가져오지 않고, props로 가져오나?\n// - 어떤 컴포넌트더라도 useSWR을 사용한다고 다시 요청하지 않기 떄문에, useSWR을 사용해도 상관 없음\n// interface Props {\n//   userData?: IUser;\n// }\n\n// redux useSelector()처럼 요즘은 hooks를 이용할 수 있기 떄문에, **데이터를 넘겨주기 위한 용도**로 props를 사용하지 않음\n// - hooks를 통해서 데이터를 바로 받아올 수 있는데(useSelector, useSWR ...)\n// - 뭐하러 container에서 state를 받아서 props로 다시 넘겨주는 복잡한 과정을..?\n// - 즉, presentational and container 패턴을 사용하지 않아도 됨\n// - 그에 따라, 부모 컴포넌트와의 연결고리가 많이 끊어진 추세(리렌더링 관련하여 덜 신경을 쓸 수 있는 효과, 최적화)\n// - High order component(HOC, 고차 컴포넌트, 다른 컴포넌트를 감싸는 컴포넌트)도 마찬가지로 줄어든 추세\n// - ***HOC의 역할? 감싼 컴포넌트에 props를 넣어주는 역할!***\n// - 이젠 props 없이도 원하는 데이터를 가져올 수 있기 때문에, HOC의 역할도 줄어듦\n// props의 다른 용도? 기본적으로 다른 값으로 같은 컴포넌트를 만들기 위함\n\nconst DMList: VFC = () => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData } = useSWR<IUser>(`${process.env.REACT_APP_API_URL}/api/users`, fetcher, {\n    revalidateOnMount: true,\n  });\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  // const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [countList, setCountList] = useState<{ [key: string]: number }>({});\n  const [onlineList, setOnlineList] = useState<number[]>([]);\n  // hooks로 관리되는 것이기 떄문에, 필요한 때에 불러서 사용할 수 있음\n  const [socket] = useSocket(workspace);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  const resetCount = useCallback(\n    (id) => () => {\n      setCountList((list) => {\n        return {\n          ...list,\n          [id]: 0,\n        };\n      });\n    },\n    [],\n  );\n\n  const onMessage = useCallback(() => {}, [workspace]);\n\n  useEffect(() => {\n    socket?.on('onlineList', (data: number[]) => {\n      setOnlineList(data);\n    });\n    socket?.on('dm', onMessage);\n    console.log('socket on dm', socket?.hasListeners('dm'), socket);\n    return () => {\n      // on 과 off는 반드시 짝을 이루자!\n      // 그렇지 않으면, on 이벤트가 중첩될 수 있기 때문에 예상과 다른 결과가 나올 수 있음\n      socket?.off('dm', onMessage);\n      console.log('socket off dm', socket?.hasListeners('dm'));\n      socket?.off('onlineList');\n    };\n  }, [socket]);\n\n  // slack은 className에 따라 image를 바뀌게 조절\n  // 마찬가지로 isOnline에 따라 className을 컨트롤\n  // count : 나중에 DM이 올 때, 몇 개 왔는지 표시\n\n  // Link vs. NavLink\n  // - Link : <a> 태그처럼 href path로 이동시키는 역할\n  // - NavLink : Link 태그 + **activeClassName\"을 사용할 수 있음\n  // - 지금 라우팅 === href의 주소라면, activeClassName CSS가 활성화\n\n  // 안 읽은 채팅 표시\n  // - 어떤 시점까지 읽었는지, 그 시점 이후 몇 개가 쌓였는지를 알아야 함\n  // - 1. 이떤 시점까지 읽었는지를 방에 들어갈 때마다 저장(업데이트) 해야 함 => DB? localStorage? 선택\n  // - 2. 해당 시점을 기준으로 몇 개가 쌓였는지 API 요청을 통해 받아올 수 있음\n  // - EachChannel, EachDM 컴포넌트로 분리\n  // - => unreads API 호출 => count를 보여줌\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Direct Messages</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          memberData?.map((member) => {\n            const isOnline = onlineList.includes(member.id);\n            return <EachDM key={'member' + member.id} member={member} isOnline={isOnline} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default DMList;\n","import { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useEffect, VFC } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport useSWR from 'swr';\n\ninterface Props {\n  channel: IChannel;\n}\nconst EachChannel: VFC<Props> = ({ channel }) => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const location = useLocation();\n  const { data: userData } = useSWR<IUser>(`${process.env.REACT_APP_API_URL}/api/users`, fetcher, {\n    revalidateOnMount: true,\n  });\n  const date = localStorage.getItem(`${workspace}-${channel.name}`) || 0;\n  const { data: count, mutate } = useSWR<number>(\n    userData\n      ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels/${channel.name}/unreads?after=${date}`\n      : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (location.pathname === `/workspace/${workspace}/channel/${channel.name}`) {\n      mutate(0);\n    }\n  }, [mutate, location.pathname, workspace, channel]);\n\n  return (\n    <NavLink\n      key={channel.name}\n      activeStyle={{ fontWeight: 'bold', color: 'white' }}\n      to={`/workspace/${workspace}/channel/${channel.name}`}\n    >\n      <span className={count !== undefined && count > 0 ? 'bold' : undefined}># {channel.name}</span>\n      {count !== undefined && count > 0 && <span className=\"count\">{count}</span>}\n    </NavLink>\n  );\n};\n\nexport default EachChannel;\n","import React, { VFC, useState, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\nimport { IUser, IChannel } from '@typings/db';\nimport { CollapseButton } from '@components/DMList/style';\nimport fetcher from '@utils/fetcher';\nimport EachChannel from '@components/EachChannel';\n\nconst ChannelList: VFC = ({}) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData } = useSWR<IUser>(`${process.env.REACT_APP_API_URL}/api/users`, fetcher, {\n    revalidateOnMount: true,\n  });\n  const { data: channelData } = useSWR<IChannel[]>(\n    userData ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n  // const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Channels</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          channelData?.map((channel) => {\n            return <EachChannel key={channel.id} channel={channel} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default ChannelList;\n","import axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport React, { VFC, FC, useCallback, useState, useEffect } from 'react';\nimport {\n  Header,\n  ProfileImg,\n  RightMenu,\n  WorkspaceWrapper,\n  Workspaces,\n  Channels,\n  Chats,\n  WorkspaceName,\n  MenuScroll,\n  ProfileModal,\n  LogOutButton,\n  WorkspaceButton,\n  AddButton,\n  WorkspaceModal,\n} from '@layouts/Workspace/style';\nimport { Redirect, Switch, Route, useParams } from 'react-router';\nimport fetcher from '@utils/fetcher';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\nimport Menu from '@components/Menu';\nimport { IUser, IChannel, IWorkspace } from '@typings/db';\nimport { Label, Button, Input } from '@pages/SignUp/style';\nimport useInput from '@hooks/useInput';\nimport Modal from '@components/Modal';\nimport CreateChannelModal from '@components/CreateChannelModal';\n// 토스트처럼 튀어나오는 알림 라이브러리 : 사용자들로 하여금 error를 인지하게 하기 위해\nimport { toast } from 'react-toastify';\nimport DirectMessage from '@pages/DirectMessage';\nimport Channel from '@pages/Channel';\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport DMList from '@components/DMList';\nimport ChannelList from '@components/ChannelList';\nimport useSocket from '@hooks/useSocket';\n\n// Workspace layout\n// 다른 컴포넌트들을 감싸는 컴포넌트라고 생각하면 될 듯?\n// children props : 미래에 <Workspace></Workspace> 안에 들어갈 JSX\n// when?\n// - **같은 layout 안에 각각 다른 내용을 넣고 싶을 때 유용!**\n// - props로 다른 컴포넌트를 넘기는 방법보다 깔끔한 듯\n\n// FC : FunctionComponent => children을 사용하는 컴포넌트 type\n// VFC : VoidFunctionComponent => children을 쓰지 않는 컴포넌트 type\nconst Workspace: FC = ({ children }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  // 캐시가 전역 스토리지처럼 동작하기 때문에 이런 식으로 막 가져다가 써도 됨\n  // 캐시는 브라우저의 메모리에 저장됨\n  // SWR은 기본적으로 간단한 인메모리 캐시를 제공하며, 브라우저 탭이나 세션이 유지되는 동안 캐시는 유효\n  const {\n    // destructuring alias\n    // - import { Redirect as R } from \"react-router\" 도 가능\n    data: userData,\n    isLoading,\n    error,\n    mutate,\n  } = useSWR<IUser | false>(`${process.env.REACT_APP_API_URL}/api/users`, fetcher, {\n    revalidateOnMount: true,\n  });\n\n  // swr 조건부 요청\n  // e.g. userData ? \"\" : null\n  // - userData가 없으면(로그인하지 않았으면) swr이 요청을 보내지 않음\n  const { data: channelData } = useSWR<IChannel[]>(\n    userData ? `${process.env.REACT_APP_API_URL}/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n    {\n      revalidateOnMount: true,\n    },\n  );\n\n  const [showProfileMenu, setShowProfileMenu] = useState(false);\n  const [showWorkspaceMenu, setShowWorkspaceMenu] = useState(false);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  // input 태그는 따로 컴포넌트화하는 것을 추천!\n  // why? 보통 onChange와 같이 쓰이는데, 입력할 때마다 리렌더링 되기 때문에\n  // 최대한 적은 JSX를 리렌더링하는 방향으로!\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\n  const [newURL, onChangeNewURL, setNewURL] = useInput('');\n  const [socket, disconnect] = useSocket(workspace);\n\n  useEffect(() => {\n    // socket이 undefined일 수도 있음\n    if (channelData && userData && socket) {\n      socket.emit('login', { id: userData.id, channels: channelData.map((v) => v.id) });\n    }\n\n    // connected, disconnected : 연결 확인\n    // nsp : namespace 이름(socket.io 추가 기능)\n    // receiveBuffer, sendBuffer : 비어있어야 정상적인 연결 상태(socket.io 추가 기능)\n    // - sendBuffer가 차있는 경우, 데이터를 서버로 보내야 하는데 연결이 끊겨서 보내지 못하는 상태\n    // - 연결이 되면 밀렸던 데이터를 보내면서 Buffer를 비움\n    // callbacks : socket.on() 했던 list\n    // io : 연결에 대한 option\n    // console.log(socket);\n  }, [socket, userData, channelData]);\n\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [workspace, disconnect]);\n  // useEffect 의존성 배열\n  // workspace가 함수 안에서 쓰이지 않더라도, 넣어줄 수 있음\n  // 캐싱, 최적화의 문제가 아니라 로직의 문제!\n  // - why? workspace가 바뀔 때, socket을 연결 해제해야 하기 때문\n\n  const onClickLogout = useCallback(() => {\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/users/logout`, null, {\n        withCredentials: true,\n      })\n      .then(() => {\n        // 로그아웃한 결과를 최신화하여 data를 fetching\n        // 실행하면 => useSWR() 실행 => data, error 값이 바뀜 => 자동으로 컴포넌트 리렌더링\n        // mutate();\n\n        // revalidate : false\n        mutate(false, { revalidate: false });\n      });\n  }, []);\n\n  // toggle 함수 : 기능을 껐다 켜는 함수\n  const onClickProfileMenu = useCallback((e) => {\n    // 문제\n    // - 같은 함수를 사용하다보니, 이벤트 버블링이 발생하여 span 태그에서도 함수 호출 => 2번 호출\n    // 해결\n    // 1. 여기서 e.stopPropagation(); => type 변경 필요\n    // 2. Menu를 감싸는 <div onClick={stopPropagation} />\n\n    // console.trace('click'); // 호출한 함수를 trace\n    e.stopPropagation();\n    setShowProfileMenu((prev) => !prev);\n  }, []);\n\n  const onClickCreateWorkspace = useCallback(() => {\n    setShowCreateWorkspaceModal(true);\n  }, []);\n\n  // 모든 모달 닫기\n  const onCloseModal = useCallback(() => {\n    setShowCreateWorkspaceModal(false);\n    setShowCreateChannelModal(false);\n    setShowInviteWorkspaceModal(false);\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onCreateWorkspace = useCallback(\n    (e) => {\n      // React form 태그에서는 항상 preventDefault => SPA, 새로고침되지 않게!\n      e.preventDefault();\n      if (!newWorkspace || !newWorkspace.trim()) return;\n      if (!newURL || !newURL.trim()) return;\n\n      axios\n        .post(\n          `${process.env.REACT_APP_API_URL}/api/workspaces`,\n          { workspace: newWorkspace, url: newURL },\n          { withCredentials: true }, // 로그인 된 상태임을 알기 위한 조건\n        )\n        .then((response) => {\n          if (userData)\n            mutate({ ...userData, Workspaces: [...userData.Workspaces, response.data] }, { revalidate: false });\n          setShowCreateWorkspaceModal(false);\n          setNewWorkspace('');\n          setNewURL('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newWorkspace, newURL],\n  );\n\n  const toggleWorkspaceMenu = useCallback(() => {\n    setShowWorkspaceMenu((prev) => !prev);\n  }, []);\n\n  const onClickAddChannel = useCallback(() => {\n    setShowWorkspaceMenu((prev) => !prev);\n    setShowCreateChannelModal(true);\n  }, []);\n\n  const onClickInviteWorkspace = useCallback(() => {\n    setShowWorkspaceMenu((prev) => !prev);\n    setShowInviteWorkspaceModal(true);\n  }, []);\n\n  // SWR의 핵심\n  // - 클라이언트 측에서 데이터를 가져오고 캐싱하는 역할\n  // - 캐싱은 클라이언트 측에서 이루어지는 메모리 또는 로컬 스토리지에 데이터를 저장하여 중복 요청을 방지하고 응답 속도를 향상시키는 기능\n  // Server-side routing과 useSWR\n  // - Server-side routing(주소 창 or 새로고침을 이용하여 백엔드에 직접 요청을 보내는 경우)에서는 useSWR의 캐싱 기능을 이용할 수 없음\n  // - why? 클라이언트 측에서 요청을 하고 응답을 받아 캐싱하는 방식으로 동작하기 때문\n  // - 즉, store에 값이 있던 말던 요청을 무조건 다시 보낸다는 뜻 => userData === undefined가 되는 경우 때문에 로직이 꼬임\n  // - /workspace/dm으로 접속 => userData가 처음에는 undefined => login 페이지 redirect => userData fetching 완료 => /workspace/channel로 가는 문제 발생\n  // 해결?\n  // - isLoading === true 인 경우 : 각각 컴포넌트에서 loading 화면\n  // - loading이 된 이후\n  // - 1. userData === false 인 경우(로그인 세션 존재하지 않을 때) : login 페이지으로 redirect\n  // - 2. userData === { ... } 인 경우(로그인 세션이 존재하여 data fetching) : /workspace/dm 페이지에 남아 있음\n  if (!isLoading && !userData) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  // 1. 아래 userData가 falsy 값이 아님을 알려주는 역할\n  // 2. loading이 끝났고, userData === false인 경우에는 화면에 아무것도 띄우지 않음\n  if (!userData) return null;\n\n  // gravatar\n  // - slack 기본 프로필 이미지처럼, 계정에 랜덤으로 프로필 이미지를 생성해주는 라이브러리\n\n  // @types 라이브러리\n  // - 해당 라이브러리에서 사용할 수 있는 type을 제공해주는 라이브러리!\n  // - 자동으로 type을 유추할 수 있도록 도와주는 라이브러리?\n  // - 높은 확률로 해당 라이브러리 제작자와 다름 => types가 다를 수 있기 때문에 사용자가 type을 만들어 적용해야 하는 경우도\n  // - npm 웹 페이지에 들어가보면, 라이브러리별로 @types 라이브러리가 있는지 확인할 수 있음\n  // 1. redux : 처럼 해당 라이브러리 내에서 type을 제공해주는 라이브러리\n  // 2. gravatar : 처럼 @types 라이브러리를 제공\n  // 3. 아예 type 라이브러리를 제공하지 않음 => type을 만들어 사용해야 함\n\n  return (\n    <div>\n      <Header>\n        <RightMenu>\n          <span onClick={onClickProfileMenu}>\n            {isLoading ? (\n              <div>로딩 중...</div>\n            ) : (\n              <>\n                <div style={{ position: 'relative', width: '35px', height: '30px' }}>\n                  <img\n                    className=\"c-base_icon c-base_icon--image\"\n                    style={{ position: 'absolute', top: '0', left: '0' }}\n                    src={gravatar.url(userData.nickname, { s: '25px', d: 'retro' })}\n                    alt={userData.email}\n                  />\n\n                  <i\n                    className=\"c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence c-presence--active c-icon--presence-online\"\n                    aria-hidden=\"true\"\n                    data-qa=\"presence_indicator\"\n                    data-qa-presence-self=\"false\"\n                    data-qa-presence-active=\"false\"\n                    data-qa-presence-dnd=\"false\"\n                    style={{ top: '10px', left: '10px' }}\n                  />\n                </div>\n                {showProfileMenu ? (\n                  <Menu style={{ right: 0, top: 38 }} show={showProfileMenu} onCloseModal={onClickProfileMenu}>\n                    <ProfileModal>\n                      <img src={gravatar.url(userData?.nickname, { s: '36px', d: 'retro' })} alt={userData.email} />\n                      <div>\n                        <span id=\"profile-name\">{userData?.nickname}</span>\n                        <span id=\"profile-active\">active</span>\n                      </div>\n                    </ProfileModal>\n                    <LogOutButton onClick={onClickLogout}>로그아웃</LogOutButton>\n                  </Menu>\n                ) : null}\n              </>\n            )}\n          </span>\n        </RightMenu>\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {isLoading ? (\n            <div>로딩 중...</div>\n          ) : (\n            // 문제\n            // - 처음 로그인을 하고 DB에서 data를 불러오는 경우, Workspaces 프로퍼티가 존재하지 않음 : {id: 1, nickname: '아잉눈', email: 'luckylooky2@naver.com'}\n            // - userData?.Workspaces === undefined 여서 발생하는 문제\n            // 해결\n            // ? : Optional Chaining Operator(Javascript 문법)\n            // 만약 userData?.Workspaces.map() 이라면, Workspaces === null | undefined 일 경우 런타임 에러가 발생\n            // 1. userData?.Workspaces && userData?.Workspaces.map()\n            // 2. userData?.Workspaces?.map()\n            // **즉, ?는 앞에 조건문을 붙여서 해당 값이 null | undefined 인 경우에 뒤에 코드를 아예 실행시키지 않는다고 생각하면 됨!**\n            // - 과정) login 때 받아온 정보 => Workspaces가 없으면 => re-fetching => userData 최신화?\n            userData?.Workspaces?.map((v) => {\n              return (\n                <Link key={v.id} to={`/workspace/${v.url}/channel/일반`}>\n                  <WorkspaceButton>{v.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n                </Link>\n              );\n            })\n          )}\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\n        </Workspaces>\n        <Channels>\n          <WorkspaceName onClick={toggleWorkspaceMenu}>{workspace}</WorkspaceName>\n          <MenuScroll>\n            <Menu show={showWorkspaceMenu} onCloseModal={toggleWorkspaceMenu} style={{ top: 95, left: 80 }}>\n              <WorkspaceModal>\n                <h2>{workspace}</h2>\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\n                <button onClick={onClickAddChannel}>채널 만들기</button>\n                <button onClick={onClickLogout}>로그아웃</button>\n              </WorkspaceModal>\n            </Menu>\n            <ChannelList />\n            <DMList />\n          </MenuScroll>\n        </Channels>\n        <Chats>\n          <Switch>\n            <Route path=\"/workspace/:workspace/channel/:channel\" component={Channel} />\n            <Route path=\"/workspace/:workspace/dm/:id\" component={DirectMessage} />\n          </Switch>\n        </Chats>\n      </WorkspaceWrapper>\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\n        <form onSubmit={onCreateWorkspace}>\n          <Label id=\"workspace-label\">\n            <span>워크스페이스 이름</span>\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\n          </Label>\n          <Label id=\"workspace-url-label\">\n            <span>워크스페이스 URL</span>\n            <Input id=\"workspace\" value={newURL} onChange={onChangeNewURL} />\n          </Label>\n          <Button type=\"submit\">생성하기</Button>\n        </form>\n      </Modal>\n      <CreateChannelModal\n        show={showCreateChannelModal}\n        onCloseModal={onCloseModal}\n        setShowCreateChannelModal={setShowCreateChannelModal}\n      />\n      <InviteWorkspaceModal\n        show={showInviteWorkspaceModal}\n        onCloseModal={onCloseModal}\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </div>\n  );\n};\n\n// to-do : CreateWorkspaceModal 분리하기\n\nexport default Workspace;\n"],"names":["RightMenu","_styled","target","name","styles","Header","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","CreateMenu","CloseModalButton","Menu","_ref","children","style","show","onCloseModal","closeButton","stopPropagation","useCallback","e","React","onClick","defaultProps","CreateModal","Modal","setShowCreateChannelModal","_useInput2","useInput","newChannel","onChangeNewChannel","setNewChannel","_useParams","useParams","workspace","_useSWR","channel","useSWR","concat","process","fetcher","revalidateOnMount","userData","data","_useSWR2","isLoading","error","mutate","channelData","mutateChannelData","onCreateChannel","preventDefault","axios","withCredentials","then","response","_toConsumableArray","revalidate","catch","_error$response","console","dir","toast","position","onSubmit","Label","id","Input","value","onChange","Button","type","Container","ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","forwardRef","ref","chat","onSubmitForm","onChangeChat","placeholder","_useState2","useState","isMaxHeight","setIsMaxHeight","memberData","onKeyDownChat","key","nativeEvent","isComposing","shiftKey","renderSuggestion","suggestion","search","highlightedDisplay","index","focused","src","gravatar","email","s","d","alt","nickname","useEffect","current","parseInt","height","onKeyDown","inputRef","overflowY","forceSuggestionsAboveCursor","Mention","appendSpaceOnAdd","trigger","map","v","display","className","trim","disabled","ChatZone","Section","StickyHeader","ChatWrapper","Chat","user","Sender","User","result","useMemo","content","startsWith","maxHeight","regexifyString","input","pattern","decorator","match","arr","Link","to","dayjs","createdAt","format","memo","chatSections","setSize","isEmpty","isReachingEnd","refCopy","onScroll","values","scrollTop","prev","getScrollHeight","scrollHeight","Scrollbars","autoHide","onScrollFrame","Object","entries","_ref2","_ref3","date","chats","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push","sockets","disconnect","io","transports","undefined","combineOldNewChats","chatData","newChatData","added","sort","a","b","DragOver","_chatData$","_chatData","_slicedToArray","setNewChatData","myData","_useSWRInfinite","useSWRInfinite","revalidateOnFocus","mutateChatData","socket","useSocket","setChat","_useState4","dragOver","setDragOver","length","textareaRef","useRef","_useState6","scrollbarRefCopy","setScrollbarRefCopy","scrollbarRefCallback","node","scrollToBottom","autosize","savedChat","prevChatData","prevNewChatData","_prevNewChatData$","_chatData$0$","SenderId","ReceiverId","Receiver","Date","localStorage","setItem","getTime","toString","flat","onMessage","Number","getClientHeight","getScrollTop","on","off","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","append","files","onDragOver","onDragLeave","ChatList","ChatBox","setShowInviteChannelModal","newMember","onChangeNewMember","setNewMember","mutateChannelMembers","onInviteMember","channelMembersData","showInviteChannelModal","_useState8","UserId","ChannelId","Channel","onClickInviteChannel","InviteChannelModal","setShowInviteWorkspaceModal","mutateWorkspaceMembers","CollapseButton","collapse","member","isOnline","location","useLocation","getItem","count","pathname","NavLink","activeStyle","fontWeight","color","width","top","left","channelCollapse","setChannelCollapse","setCountList","onlineList","setOnlineList","toggleChannelCollapse","list","_objectSpread","_defineProperty","log","hasListeners","includes","EachDM","_objectDestructuringEmpty","EachChannel","_userData$Workspaces","showProfileMenu","setShowProfileMenu","showWorkspaceMenu","setShowWorkspaceMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","showCreateChannelModal","_useState10","showInviteWorkspaceModal","_useState12","newWorkspace","onChangeNewWorkspace","setNewWorkspace","_useInput4","newURL","onChangeNewURL","setNewURL","_useSocket2","emit","channels","onClickLogout","onClickProfileMenu","onClickCreateWorkspace","onCreateWorkspace","url","toggleWorkspaceMenu","onClickAddChannel","onClickInviteWorkspace","right","slice","toUpperCase","ChannelList","DMList","Switch","Route","path","component","DirectMessage","CreateChannelModal","InviteWorkspaceModal","Redirect"],"sourceRoot":""}