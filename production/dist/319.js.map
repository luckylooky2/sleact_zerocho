{"version":3,"file":"319.js","mappings":"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","sources":["webpack://sleact-ts-front/./pages/SignUp/index.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Header, Form, Label, Input, Button, Error, Success, LinkContainer } from '@pages/SignUp/style';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport { Redirect } from 'react-router-dom';\n\n// redux를 사용하는 이유\n// - 1. 전체(전역)적인 상태를 관리\n// - 2. 비동기 로직과 컴포넌트를 분리\n// - 비동기 요청이 있을 때, thunk, saga와 같은 middleware로 요청을 보냄\n// - 즉, 비동기 코드가 컴포넌트에 남아있지 않음\n// - 장점) 코드 가독성 향상, 재사용성(비동기 코드를 외부에서 재사용)\n// - 성능 최적화 : 비동기 코드를 분리하면 필요한 경우에만 실행하고 결과를 처리할 수 있습니다.\n// - 예를 들어, 컴포넌트가 처음 마운트될 때 비동기 데이터를 가져오는 경우, 컴포넌트가 다시 렌더링될 때마다 데이터를 다시 가져오는 것이 아니라 필요한 경우에만 비동기 함수를 호출하여 성능을 최적화할 수 있습니다.\n// - 단점) 코드가 너무 길어짐\n\n// 이 프로젝트에서는 컴포넌트에서 비동기 코드를 딱히 분리할 이유가 없음\n// - 컴포넌트 하나에서만 유일하게 쓰이는 비동기 코드인 경우\n// - 해당 컴포넌트 내에서만 쓰이는 비동기 코드는 redux로 넘기지 않고 해당 컴포넌트 안에서 해결!\n\nconst SignUp = () => {\n  // 아래 코드(hook)들이 비슷하게 사용될 가능성이 있음 => custom hook을 만들 수 있는지 생각해보자\n  // _중복 코드가 아닐 수 있으므로, 처음에는 중복 제거/최적화/리팩토링를 코드를 대부분 완성한 뒤에 할 것!_\n  // useInput custom hook\n  // const [email, setEmail] = useState('');\n  // const [nickname, setNickname] = useState('');\n  const [email, onChangeEmail, setEmail] = useInput('');\n  const [nickname, onChangeNickname, setNickname] = useInput('');\n  const [password, setPassword] = useState('');\n  const [passwordCheck, setPasswordCheck] = useState('');\n  // error\n  const [missmatchError, setMissmatchError] = useState(false);\n  const [nicknameError, setNicknameError] = useState(false);\n  const [signUpError, setSignUpError] = useState('');\n  const [signUpSuccess, setSignUpSuccess] = useState(false);\n\n  // 로그인 이후, 다시 회원가입으로 접근하기 위해 막는 장치\n  const { data, isLoading, error, mutate } = useSWR(`${process.env.REACT_APP_API_URL}/api/users`, fetcher, {\n    revalidateOnMount: true,\n  });\n\n  // const onChangeEmail = useCallback((e) => {\n  //   setEmail(e.target.value);\n  // }, []);\n  // const onChangeNickname = useCallback((e) => {\n  //   setNickname(e.target.value);\n  // }, []);\n\n  const onChangePassword = useCallback(\n    (e) => {\n      setPassword(e.target.value);\n      setMissmatchError(!!passwordCheck && e.target.value !== passwordCheck);\n    },\n    [passwordCheck],\n  );\n\n  const onChangePasswordCheck = useCallback(\n    (e) => {\n      setPasswordCheck(e.target.value);\n      setMissmatchError(!!password && e.target.value !== password);\n    },\n    [password],\n  );\n\n  const onSubmitSignUp = useCallback(\n    (e) => {\n      e.preventDefault(); // SPA이기 때문에\n      if (!nickname) return setNicknameError(true);\n      else setNicknameError(false);\n      if (!missmatchError && nickname) {\n        // 비동기 요청 3단계 : loading => success => failure\n        // 1. loading\n        // 비동기 요청에서 setState를 하는 코드가 있을 경우에는, 비동기 요청 하기 전에 초기화를 해주는 것이 좋음!\n        // why? **요청을 연달아 보낼 때, 이전 state가 다음 요청에 영향을 줄 가능성이 있기 때문**\n        setSignUpError('');\n        setSignUpSuccess(false);\n        // 현재는 CORS 백엔드 설정을 해놓았기 때문에 CORS 에러가 발생하지 않음\n        // CORS : 프런트 서버에서 가져온 리소스가, 프런트 서버가 아닌 다른 origin으로 요청을 보낸 경우 브라우저에서 이 요청을 강제로 막는 기능\n        // 해결\n        // 1. 백엔드 서버 설정 : cors origin: true => OPTIONS 요청 같이 보냄(cross origin)\n        // 2. 프런트 서버 프록시 설정 : 일단 프런트 서버로 요청을 보내고(CORS 해결), 프런트 서버에서 백 서버로 요청을 보내는 방법\n        // - OPTIONS 요청을 보내지 않음(same origin)\n        // - 단, 이 방법은 프런트, 백 둘 다 localhost일 때만 가능(42Partner)\n        // - 프런트는 localhost인데 백은 실제 서버라고 하면 proxy 방법은 사용하지 못함\n        // Postman과 같은 프로그램에서 CORS 오류가 발생하지 않는 이유?\n        // - CORS는 브라우저에서 발생시키는 오류이기 때문\n\n        // 또 하나의 문제\n        // withCredential : 프런트 서버 주소와 백 서버 주소가 다른 경우, cookie 전달이 불가능(브라우저 기본 옵션?)\n        // **로그인은 브라우저에 저장된 쿠키를 프런트에서 백으로 보내서 확인하는 과정!**\n        // 해결 : axios 요청 config 매개 변수 자리에 { withCredential: true }를 설정\n        axios\n          // { email : email, nickname : nickname, password : password }가 아니라 { email, nickname, password }?\n          // 객체의 속성을 명확하게 식별하고 가독성을 높이기 위해 가능한한 키를 명시적으로 지정하는 것이 좋음\n          .post(`${process.env.REACT_APP_API_URL}/api/users`, { email, nickname, password }) // url, data\n          // 2. success\n          .then((response) => {\n            setSignUpSuccess(true);\n          }) // 요청에 성공했을 때 로직\n          // 3. failure\n          .catch((error) => {\n            setSignUpError(error.response.data);\n          }) // 요청에 실패했을 때 로직\n          .finally(() => {}); // 요청에 성공하든 실패하든 이후에 처리할 로직\n      }\n    },\n    [email, nickname, password, passwordCheck, missmatchError], // 넣는 기준? 매개 변수(x), 함수 내에서 사용한 외부 변수(o)\n  );\n\n  // redirect 될 때, 깜빡 거리는 것은 loading 화면으로 해결하자!\n  // isLoading으로는 안 되나..?\n  if (isLoading) {\n    return <div>로딩 중...</div>;\n  }\n\n  if (data) {\n    return <Redirect to=\"/workspace/channel\" />;\n  }\n\n  return (\n    <div id=\"container\">\n      <Header>\n        <img src=\"https://a.slack-edge.com/cebaa/img/ico/favicon.ico\" alt=\"slack_favicon\" />\n        Sleact\n      </Header>\n      <Form onSubmit={onSubmitSignUp}>\n        <Label id=\"email-label\">\n          <span>이메일 주소</span>\n          <div>\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={onChangeEmail} />\n          </div>\n        </Label>\n        <Label id=\"nickname-label\">\n          <span>닉네임</span>\n          <div>\n            <Input type=\"text\" id=\"nickname\" name=\"nickname\" value={nickname} onChange={onChangeNickname} />\n          </div>\n        </Label>\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <div>\n            <Input type=\"password\" id=\"password\" name=\"password\" value={password} onChange={onChangePassword} />\n          </div>\n        </Label>\n        <Label id=\"password-check-label\">\n          <span>비밀번호 확인</span>\n          <div>\n            <Input\n              type=\"password\"\n              id=\"password-check\"\n              name=\"password-check\"\n              value={passwordCheck}\n              onChange={onChangePasswordCheck}\n            />\n          </div>\n          {missmatchError && <Error>비밀번호가 일치하지 않습니다.</Error>}\n          {nicknameError && <Error>닉네임을 입력해주세요.</Error>}\n          {signUpError && <Error>{signUpError}</Error>}\n          {signUpSuccess && <Success>회원가입 되었습니다! 로그인해주세요.</Success>}\n        </Label>\n        <Button type=\"submit\">회원가입</Button>\n      </Form>\n      <LinkContainer>\n        이미 회원이신가요?&nbsp;\n        <Link to=\"/login\">로그인 하러가기</Link>\n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"names":["_useInput2","_slicedToArray","useInput","email","onChangeEmail","_useInput4","nickname","onChangeNickname","_useState2","useState","password","setPassword","_useState4","passwordCheck","setPasswordCheck","_useState6","missmatchError","setMissmatchError","_useState8","nicknameError","setNicknameError","_useState10","signUpError","setSignUpError","_useState12","signUpSuccess","setSignUpSuccess","_useSWR","useSWR","concat","process","fetcher","revalidateOnMount","data","isLoading","onChangePassword","error","mutate","useCallback","e","target","value","onChangePasswordCheck","onSubmitSignUp","preventDefault","axios","then","response","catch","finally","React","Redirect","to","id","Header","src","alt","Form","onSubmit","Label","Input","type","name","onChange","Error","Success","Button","LinkContainer","Link"],"sourceRoot":""}